basePath: /api
definitions:
  dto.CreateTodo:
    properties:
      description:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateUser:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.RefreshToken:
    properties:
      refresh_token:
        type: string
      user_id:
        type: integer
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.Todo:
    properties:
      completed:
        type: boolean
      completed_at:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  dto.UpdateTodo:
    properties:
      completed:
        type: boolean
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  dto.UpdateUser:
    properties:
      password:
        type: string
    type: object
  dto.User:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  errs.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
  title: Todo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Login
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh Token
      parameters:
      - description: Refresh Token
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Refresh Token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Signup
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Signup
      tags:
      - auth
  /health_check:
    get:
      consumes:
      - application/json
      description: HealthCheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: HealthCheck
      tags:
      - health_check
  /todos:
    get:
      consumes:
      - application/json
      description: Find todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Todo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Find todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create todo
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTodo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      security:
      - BearerAuth: []
      summary: Create todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete todo
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Delete todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Find todo by id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Find todo by id
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update todo
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTodo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Todo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errs.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Update todo
      tags:
      - todos
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Update user
      tags:
      - users
  /users/{id}/todos:
    get:
      consumes:
      - application/json
      description: Find user todos
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Todo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.HTTPError'
      summary: Find user todos
      tags:
      - users
swagger: "2.0"
